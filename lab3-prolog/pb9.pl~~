% Dandu-se o valoare N, se cere sa se genereze permutarile de N elemente
% cu proprietatea ca oricare ar fi 2<=i<=n exista un 1<=j<=i astfel
% incat |v(i)-v(j)|=1.
%
% prelucreaza(L:List, C:list, Index:Integer)
prelucreaza([], _, _):-!.
prelucreaza([H|T], C, Index):-
    Copie = C,
    verifica_proprietate(Copie, H, Index, 1),
    IndexNou is Index + 1,
    prelucreaza(T, C, IndexNou).

% verifica_proprietate(L:list, Nr:Integer, IndexOprire:Integer,
% Index:Integer)
verifica_proprietate(_, _, Index, Index):-fail.
verifica_proprietate([H|_], Nr, _, _):-
    Dif is H - Nr,
    abs(Dif) =:= 1, !.
verifica_proprietate([_|T], Nr, IndexOprire, Index):-
    IndexNou is Index + 1,
    verifica_proprietate(T, Nr, IndexOprire, IndexNou).


% apare(Nr:Integer, L:list) (i,i) - determinist
apare(Nr, [Nr|_]):-!.
apare(Nr, [_|T]):-
    apare(Nr, T).

% candidat(N:Integer, I:Integer) (i,o) - nedeterminist
candidat(N, N).
candidat(N, I):-
    N > 1,
    N1 is N - 1,
    candidat(N1, I).

% permutari(N:Integer, L:list) (i,o) - nedeterminist
permutari(N, L):-
    candidat(N, I),
    permutari_aux(N, L, 1, [I]).

% permutari_aux(N:Integer, L:list, Lg:Integer, Col:list)
% (i,o,i,i) - nedeterminist
permutari_aux(N, Col, N, Col):-!,
    CopieCol = Col,
    prelucreaza(CopieCol, Col, 2).
permutari_aux(N, L, Lg, Col):-
    candidat(N, I),
    \+apare(I, Col), %(i,i)
    Lg1 is Lg + 1,
    permutari_aux(N, L, Lg1, [I|Col]).



